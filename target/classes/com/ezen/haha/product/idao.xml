<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ezen.haha.product.Service">
	<resultMap type="com.ezen.haha.product.ProductDTO" id="product">
		<result property="image" column="image"/>
		<result property="sname" column="sname"/>
		<result property="price" column="price"/>
	</resultMap>
	<resultMap type="com.ezen.haha.membership.MembershipDTO" id="membership">
		<result property="id" column="id"/>
		<result property="pw" column="pw"/>
		<result property="name" column="name"/>
		<result property="tel" column="tel"/>
		<result property="email" column="email"/>
		<result property="pid" column="pid"/>
		<result property="address" column="address"/>
		<result property="stringrank" column="stringrank"/>
		<result property="rank" column="rank"/>
	</resultMap>
	<resultMap type="com.ezen.haha.product.BasketDTO" id="basket">
		<result property="id" column="id"/>
		<result property="psize" column="psize"/>
		<result property="basketnum" column="basketnum"/>
		<result property="snum" column="snum"/>
		<result property="guestbuysu" column="guestbuysu"/>
		<result property="color" column="color"/>
		<result property="stock" column="stock"/>
		<collection property="productdto" ofType="com.ezen.haha.product.ProductDTO" resultMap="product"/>
		<collection property="membershipdto" ofType="com.ezen.haha.membership.MembershipDTO" resultMap="membership"/>
	</resultMap>


	<!-- 관리자 상품 정보 입력 -->
	<insert id="productinsert">
		insert into product values(#{param1},#{param2},#{param3},#{param4},#{param5},
								   #{param6},#{param7},#{param8},#{param9},#{param10},
								   #{param11},#{param12},#{param13},#{param14})
	</insert>

	<!-- 상품 정보(목록) 출력 -->
	<select id="productout" resultType="com.ezen.haha.product.ProductDTO">		
		select * from (
        select 
            row_number() over (order by sname, snum) as rn, A.* 
        from (
            select * from product) A
    	) where rn between #{start} AND #{end}
	</select>
	
	<!-- 상품 내용 출력 -->
	<select id="detailview" resultType="com.ezen.haha.product.ProductDTO">
		select * from product where snum=#{param1}
	</select>
	
	<!-- 컬러에 맞는 제품의 상품 코드 가져오기 -->
	<select id="colorsnumsearch" resultType="java.lang.Integer">
		select snum from product where sname=#{param1} and color=#{param2}
	</select>
	<!-- 상품이 존재하는지 체크 -->
	<select id="jaegocheck" resultType="int">
		select count(*) from product where snum=#{param1} and ssize=#{param2} and color=#{param3} and su>=#{param4}
	</select>
	
	<!-- 장바구니 동일 제품이 있는지 중복 체크  -->
	<select id="duplicateCheck" resultType="int">
		select count(*) from basket where id=#{param1} and snum=#{param2} and psize=#{param3}
	</select>
	<!-- 장바구니 데이터 DB에 저장 -->
	<insert id="basketinsert">
		insert into basket values(basket_seq.nextval,#{param1},#{param2},#{param3},#{param4},#{param5})
	</insert>
	<!--  즉시구매 장바구니 데이터 DB에 저장 -->
	<insert id="basketdirectinsert" parameterType="com.ezen.haha.product.BasketDTO" useGeneratedKeys="true" keyProperty="basketnum" keyColumn="basketnum">
		insert into basket values(basket_seq.nextval,#{id},#{snum},#{guestbuysu},#{psize},#{color})
	</insert>
	
	
	<!-- 장바구니 출력 -->
	<select id="basketout" resultMap="basket">
		select b.*, p.image, p.sname, p.price 
			from basket b join product p 
			on b.snum = p.snum
			where id = #{param1} 
	</select>
	
	<!-- 장바구니에서 수정한 수량, 총 가격 업데이트 -->
	<update id="updatebasket">
		update basket set guestbuysu = #{param2} where basketnum = #{param1}
	</update>
	

		
	<!-- 장바구니에서 체크박스 선택(장바구니 번호로 구분) 후 구매 화면으로 이동 -->
	<select id="basketsell" resultMap="basket"> 
		SELECT b.id, b.snum, b.sname, b.stype, b.guestbuysu, b.totprice, b.ssize, b.image, b.color,
       		   m.name, m.tel, m.email, m.address
		from basket b
		inner join member m on b.id = m.id
		where b.basketnum = #{param1}
	</select>	
	
	<!-- 구매 시 정보 입력을 위해 회원 정보를 가져옴 -->
	<select id="IDinformation" resultType="com.ezen.haha.membership.MembershipDTO">
		select id,name,tel,email,address from member where id=#{param1}
	</select>
	
	<!-- 구매 버튼 누를 시 주문 정보 초기화 -->
	<delete id="deleteproductsell">
		delete from productsell
	</delete>
	
	<!-- 구매 버튼 누를 시 주문 정보 DB에 저장 -->
	<insert id="Productsellinsert">
		insert into productsell values(sell_seq.nextval,#{param1},#{param2},#{param3},#{param4},#{param5},#{param6},#{param7},#{param8},#{param9},#{param10},#{param11},#{param12},#{param13})
	</insert>
	
	<!-- 구매 버튼 누를 시 주문 정보 출력 -->
	<select id="productsellout" resultType="com.ezen.haha.product.ProductSellDTO">
		select * from productsell
	</select>
	
	<!-- 주문 결제 창 정보 출력 -->
	<select id="productsell" resultMap="basket">
		select p.sname, b.color, b.psize, b.guestbuysu, p.image, p.price
			   from basket b join product p
			   on b.snum = p.snum
			   where basketnum = #{param1}
	</select>
	
	<!-- 주문 결제 창 정보(포인트,등급) 출력 -->
	<select id="pointOut" resultType="String">
		select point from member where id=#{param1} 
	</select>
	<select id="rankOut" resultType="String">
		select rank from member where id=#{param1} 
	</select>
	
	<!-- 페이징 처리 -->
	<select id="total" resultType="int">
	   select count(distinct sname) from product <!-- 이름이 같을 경우 중복방지 --> 
	</select>
	<select id="totalbasket" resultType="int">
	   select count(*) from basket where id=#{param1}
	</select>
	
	<!-- 장바구니 목록 삭제 -->
	<delete id="deletebasket">
		delete from basket where basketnum=#{param1}
	</delete>
	
	<!-- 상품 내용 화면에서 상품 삭제 -->
	<delete id="deleteproduct">
		delete from product where snum=#{param1}
	</delete>
	
	<!-- 상품 내용 화면에서 상품 수정 화면으로 가기 -->
	<select id="updateproductview" resultType="com.ezen.haha.product.ProductDTO">
		select * from product where snum=#{param1}
	</select>
	
	<!-- 상품 수정 화면에서 받은 데이터로 상품 정보 수정하기(이미지 개수 만큼 증가) -->
	<update id="updateproductmainimage">
		update product set snum=#{param1},sname=#{param2},stype=#{param3},su=#{param4},price=#{param5},
			ssize=#{param6},color=#{param7},image=#{param8},intro=#{param9},best=#{param10} 
			where snum=#{param11}
	</update>
	<update id="updateproductsideimage1">
		update product set sideimage1=#{param1} where snum=#{param2}
	</update>
	<update id="updateproductsideimage2">
		update product set sideimage2=#{param1} where snum=#{param2}
	</update>
	<update id="updateproductsideimage3">
		update product set sideimage3=#{param1} where snum=#{param2}
	</update>
	
	<!-- 리뷰 쓰기 전 해당 상품을 구입했는지 체크 -->
	<!-- 상품 구입 후 상품 구입 목록을 저장하는 DB를 후에 따로 만들어 체크해야함 -->
	<!-- 지금은 상품 리뷰 DB(productreview)에서 자체 체크 -->
	<select id="productbuysearch" resultType="java.lang.Integer">
		select snum from payinfo where id=#{param1} and snum=#{param2}
	</select>
	
	<!-- 상품 리뷰 입력 후 DB에 저장 -->
	<insert id="productreviewsave">
		insert into productreview values(review_seq.nextval,#{param1},#{param2},#{param3},1,#{param4},#{param5},#{param6},sysdate,#{param7},#{param8})
	</insert>
	
	<!-- 상품 리뷰 출력(detailview.jsp) -->
	<select id="productreviewout" resultType="com.ezen.haha.product.ProductreviewDTO">
		select id,btitle,bcontent,bpicture,to_char(bdate,'yyyy-MM-dd')bdate,productrank from productreview where snum=#{param1}
	</select>
	
	<select id="stockcheck" resultType="String">
		select ${param2}size from product where snum = #{param1}
	</select>
	
	<!-- 베스트 상품 화면 출력 -->
	<select id="bestproductout" resultType="com.ezen.haha.product.ProductDTO">
		select * from product where best=1
	</select>
	
	
	<!-- 관리자 상품 정보(목록) 출력 -->
	<select id="searchout" resultType="com.ezen.haha.product.ProductDTO">      
      select * from (
       select row_number() over (order by snum) as rn, A.* from (
        select * from product where stype=#{param1}) A) where rn between #{param2} and #{param3}
   </select>
	<select id="totalSearch" resultType="int">
	   select count(*) from product where stype=#{param1}
	</select>
	
	<!-- 추천 상품 찾기 -->
	<select id="recommendsearch" resultType="com.ezen.haha.product.ProductDTO">
		select * from product where recommend=#{param1}
	</select>
	
	<select id="searchOutValue" resultType="com.ezen.haha.product.ProductDTO">      
      select * from (
       select row_number() over (order by snum) as rn, A.* from (
        select * from product where sname like '%' || #{param1} || '%' ) A
        ) where rn between #{param2} and #{param3}
   </select>
	<select id="totalValue" resultType="int">
	   select count(*) from product where sname like '%' || #{param1} || '%'
	</select>
	
	 <select id="searchOutKey" resultType="com.ezen.haha.product.ProductDTO">      
      select * from (
       select row_number() over (order by snum) as rn, A.* from (
        select * from product where stype = #{param1} ) A
        ) where rn between #{param2} and #{param3}
   </select>
	<select id="totalKey" resultType="int">
	   select count(*) from product where stype = #{param1}
	</select>
	
	<select id="searchOutKeyValue" resultType="com.ezen.haha.product.ProductDTO">      
      select * from (
       select row_number() over (order by snum) as rn, A.* from (
        select * from product where stype = #{param1} and sname like '%' || #{param2} || '%' ) A
        ) where rn between #{param3} and #{param4}
   </select>
	<select id="totalKeyValue" resultType="int">
	   select count(*) from product where stype = #{param1} and sname like '%' || #{param2} || '%' 
	</select>
	
	<!-- 삭제 찾기 -->
	<select id="selectFile" resultType="String">
		select image from product where snum=#{param1}
	</select>
	
	<!-- 주소지 목록 불러오기-->
	<select id="addresslistout" resultType="com.ezen.haha.mypage.AddressListDTO">
		select * from addresslist where id = #{param1}
	</select>
	<!-- 쿠폰 목록 불러오기-->
	<select id="couponlistout" resultType="com.ezen.haha.mypage.CouponDTO">
		select * from coupon where id = #{param1}
	</select>
</mapper>
