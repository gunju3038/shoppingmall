<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ezen.haha.pay.Service">
	<!-- 상품 결재 완료 후 관련 데이터 DB 저장(payinfo) -->
	<update id="payinsert">
 		 update payinfo set tid = #{param1}, id = #{param3}, paytype = #{param4}, sname = #{param5},
                     paynum = #{param6}, totprice = #{param7}, payendtime = TO_DATE(#{param8}, 'YYYY-MM-DD"T"HH24:MI:SS'), 
                     snum = #{param9}, address = #{param10}, name = #{param11}, tel = #{param12}, email = #{param13},
                     drequest = #{param14}, paystate = #{param15}, payment = #{param16},usecoupon = #{param17}, savepoint = #{param18}
                     where orderid = #{param2}
    </update> 	
 	
 	<insert id="bankinsert">
		insert into payinfo(orderid,id,name,address,tel,email,payment,snum,sname,paynum,totprice,payendtime,paystate,usecoupon,savepoint) 
				values(orderid_seq.nextval,#{param1},#{param2},#{param3},#{param4},#{param5},#{param6},#{param7},
						#{param8},#{param9},#{param10},TO_DATE(#{param11}, 'YYYY-MM-DD HH24:MI:SS'),#{param12},
						#{param13},#{param14})

 	</insert>
 	
 	
 	<!-- 상품 결재 완료 후 결과 출력 -->
 	<select id="payout" resultType="com.ezen.haha.pay.PayDTO">
 		select orderid,sname,paynum,totprice,payendtime, 
 		case when paystate = 1 then '결재완료'
            when paystate = 0 then '환불완료' end as paystate
 		from payinfo where orderid=#{param1} and id=#{param2}
 	</select>
 	
 	
 	<!-- 환불 확인 -->
 	<select id="paysearch" resultType="com.ezen.haha.pay.PayDTO">
 		select tid,orderid,sname,paynum,totprice,payendtime,payment
        from payinfo where orderid=#{param1}
 	</select>
 	
 	<update id="updatepaylist">
 		update payinfo set paystate=0 where orderid=#{param1}
 	</update>
 	<!-- 상품 결재 완료 후 재고 감소 업데이트 -->
 	<update id="productsuupdate">
 		update product set ${psize}size = ${psize}size -${guestbuysu} where snum = #{snum} 
 	</update>
 	<update id="payinfoupdate">
 		update payinfo set guestbuysu = #{param1} where orderid =  #{param2}
 	</update> 
 	<!-- 이메일 가져오기 -->
 	<select id="email" resultType="String">
 		select email from member where id = #{param1}
 	</select>
 	<!-- 재고 감소를 위한 정보가져오기 -->
 	<select id="basketInfo" resultType="com.ezen.haha.product.BasketDTO">
 		select * from basket where basketnum = #{param1}
 	</select>
 	<!-- 장바구니 삭제 -->
 	<delete id="basketDelete">
 		delete from basket where basketnum = #{param1}
 	</delete>
 	<!-- 결제 후 포인트 및 쿠폰업데이트 -->
 	 <update id="couponUpdate" >
 		update coupon set ${param2} = ${param2} - 1 where id = #{param1}
 	</update>
 	 <update id="pointUpdate" >
 		update member set point = point-${param2}+${param3} where id = #{param1}
 	</update>
 	<!-- 주문번호 만들기 -->
 	<insert id="insertorderid" parameterType="com.ezen.haha.pay.PayDTO" useGeneratedKeys="true" keyProperty="orderid" keyColumn="orderid">
 		insert into payinfo(orderid) values(orderid_seq.nextval)
 	</insert>
 	
 	
 	<update id="rankUpdate">
		update member
		set rank = 
		    case 
		        when #{param2} >= 1000000 then 4
		        when #{param2} >= 500000 then 3
		        when #{param2} >= 200000 then 2
		        else 1
		    end
		 where id = #{param1}
 	</update>
 	<select id="totalPrice" resultType="Integer">
		select sum(totprice) from payinfo where id = #{param1} and paystate = 1
	</select>
		<select id="selectUseCoupon" resultType="String">
		select usecoupon from payinfo where orderid = #{param1}
	</select>
	<select id="selectSavePoint" resultType="Integer">
		select savepoint from payinfo where orderid = #{param1}
	</select>
	<update id="couponRefund">
		update coupon set ${param2} = ${param2}+1 where id = #{param1}
	</update>
	<update id="savePointRefund">
		update member set point = point - #{param2} where id = #{param1}
	</update>

</mapper>
